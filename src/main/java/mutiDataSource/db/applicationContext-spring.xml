<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
">
    <context:property-placeholder
            ignore-unresolvable="true" location="classpath*:db.properties" />

    <!-- 两个数据源的功用配置，方便下面直接引用 -->
    <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close" abstract="true">
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource"/>
<!--        <property name="poolSize" value="10" />
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="30"/>
        <property name="borrowConnectionTimeout" value="60"/>
        <property name="reapTimeout" value="20"/>
        &lt;!&ndash; 最大空闲时间 &ndash;&gt;
        <property name="maxIdleTime" value="60"/>
        <property name="maintenanceInterval" value="60" />
        <property name="loginTimeout" value="60"/>
        <property name="logWriter" value="60"/>-->
<!--        <property name="testQuery">
            <value>select 1</value>
        </property>-->

    </bean>

    <!-- 配置第一个数据源 -->
    <bean id="masterDataSource" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitestone" />
        <property name="xaDataSourceClassName"
                  value="com.alibaba.druid.pool.xa.DruidXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="url">${db.url}</prop>
                <prop key="username">${db.username}</prop>
                <prop key="password">${db.password}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置第二个数据源-->
    <bean id="slaveDataSource" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitesttwo" />
        <property name="xaDataSourceClassName"
                  value="com.alibaba.druid.pool.xa.DruidXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="url">${slavedb.url}</prop>
                <prop key="username">${slavedb.username}</prop>
                <prop key="password">${slavedb.password}</prop>
            </props>
        </property>
    </bean>


    <bean name="dynamicDatasource" class="cn.cmatc.frame.dynamicDb.CustomerDatasource">
        <property name="targetDataSources">
            <map>
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave" value-ref="slaveDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource" />
    </bean>

    <!-- 配置MyBatis session工厂 master-->
    <bean id="masterSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="masterDataSource" />
        <!-- 加载全局的配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:cn/cmatc/xm/*/model/*.xml</value>
            </list>
        </property>
    </bean>

    <!-- 配置MyBatis session工厂 slave-->
    <bean id="slaveSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="slaveDataSource" />
        <!-- 加载全局的配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:cn/cmatc/xm/*/model/*.xml</value>
            </list>
        </property>
    </bean>

    <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="cn.cmatc.frame.dynamicDb.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="masterSqlSessionFactory" />
        <property name="targetSqlSessionFactorys">
            <map>
                <entry value-ref="masterSqlSessionFactory" key="master"/>
                <entry value-ref="slaveSqlSessionFactory" key="slave"/>
            </map>
        </property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
<!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.cmatc.xm.*.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionTemplate"/>
    </bean>-->
    <!--id="mapperScannerConfigurer"-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.cmatc.xm.*.dao"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

    <!-- atomikos事务管理器 -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>

    <!-- spring 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction" />
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>

    <!-- 自动扫描dao和service包(自动注入) -->
    <context:component-scan
            base-package="cn.cmatc.xm.*.dao,cn.cmatc.xm.*.service,cn.cmatc.xm.*.resource" />

<!--    <bean id="dataSource" class="cn.cmatc.frame.db.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave" value-ref="slaveDataSource"/>
            </map>

        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>-->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
<!--    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>-->
<!--    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
    </bean>-->


    <!-- 第一种方式: 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 配置数据库注解aop -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <bean id="manyDataSourceAspect" class="cn.cmatc.frame.dynamicDb.ChooseDataSourceAspect" />
    <aop:config>
        <aop:aspect id="c" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* cn.cmatc.xm.*.dao.*.*(..))"/>
            <aop:before pointcut-ref="tx" method="changeDataSourceBeforeMethodExecution"/>
        </aop:aspect>
    </aop:config>

    <!-- activti 使用的数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />

        <property name="initialSize" value="0" />
        <property name="maxActive" value="20" />
        <property name="minIdle" value="0" />
        <property name="maxWait" value="60000" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="1800" />
        <property name="logAbandoned" value="true" />
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
        <property name="filters" value="mergeStat" />
    </bean>

    <import resource="applicationContext-activiti.xml" />

</beans>




